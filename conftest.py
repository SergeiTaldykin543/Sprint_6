import pytest
import allure
from selenium import webdriver
from selenium.webdriver.firefox.service import Service
import os


@pytest.fixture(scope="function")
def driver():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –∑–∞–∫—Ä—ã—Ç–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞"""
    
    with allure.step("–ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ Firefox"):
        # –í–∞—Ä–∏–∞–Ω—Ç 1: –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä–∞–π–≤–µ—Ä –∏–∑ PATH –µ—Å–ª–∏ –æ–Ω —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        try:
            # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –¥—Ä–∞–π–≤–µ—Ä –±–µ–∑ webdriver-manager
            service = Service()
            driver = webdriver.Firefox(service=service)
            print("‚úÖ Firefox driver created using system PATH")
            
        except Exception as e:
            print(f"‚ùå Error creating driver from PATH: {e}")
            
            # –í–∞—Ä–∏–∞–Ω—Ç 2: –†—É—á–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–∞
            print("üîÑ Trying alternative approach...")
            
            # –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ geckodriver –≤—Ä—É—á–Ω—É—é (–µ—Å–ª–∏ –æ–Ω —É–∂–µ —Å–∫–∞—á–∞–Ω)
            geckodriver_path = "C:/WebDriver/geckodriver.exe"  # –∏–ª–∏ –¥—Ä—É–≥–æ–π –ø—É—Ç—å
            
            if os.path.exists(geckodriver_path):
                service = Service(geckodriver_path)
                driver = webdriver.Firefox(service=service)
                print("‚úÖ Firefox driver created using manual path")
            else:
                # –í–∞—Ä–∏–∞–Ω—Ç 3: –ò—Å–ø–æ–ª—å–∑—É–µ–º Chrome –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
                try:
                    from selenium.webdriver.chrome.service import Service as ChromeService
                    from webdriver_manager.chrome import ChromeDriverManager
                    
                    service = ChromeService(ChromeDriverManager().install())
                    driver = webdriver.Chrome(service=service)
                    print("‚úÖ Chrome driver created as fallback")
                except:
                    raise Exception("Cannot create any WebDriver. Please install Firefox or Chrome driver manually.")
    
    driver.maximize_window()
    
    yield driver
    
    with allure.step("–ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞"):
        driver.quit()


@pytest.hookimpl(tryfirst=True, hookwrapper=True)
def pytest_runtest_makereport(item, call):
    """
    –•—É–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤
    """
    outcome = yield
    report = outcome.get_result()
    
    # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞
    if report.when == "call" and report.failed:
        driver = item.funcargs.get('driver')
        if driver:
            try:
                # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
                screenshot = driver.get_screenshot_as_png()
                
                # –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∫ Allure –æ—Ç—á–µ—Ç—É
                allure.attach(
                    screenshot,
                    name="screenshot_on_failure",
                    attachment_type=allure.attachment_type.PNG
                )
                
                # –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É
                page_source = driver.page_source
                allure.attach(
                    page_source,
                    name="page_source_on_failure", 
                    attachment_type=allure.attachment_type.HTML
                )
                
                print("üì∏ Screenshot captured and attached to Allure report")
                
            except Exception as e:
                print(f"‚ùå Could not capture screenshot: {e}")
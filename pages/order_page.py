from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from .base_page import BasePage
import urls


class OrderPage(BasePage):
    # –õ–æ–∫–∞—Ç–æ—Ä—ã —Ñ–æ—Ä–º—ã –∑–∞–∫–∞–∑–∞ - –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    FIRST_NAME_INPUT = (By.XPATH, "//input[@placeholder='* –ò–º—è']")
    LAST_NAME_INPUT = (By.XPATH, "//input[@placeholder='* –§–∞–º–∏–ª–∏—è']")
    ADDRESS_INPUT = (By.XPATH, "//input[@placeholder='* –ê–¥—Ä–µ—Å: –∫—É–¥–∞ –ø—Ä–∏–≤–µ–∑—Ç–∏ –∑–∞–∫–∞–∑']")
    METRO_STATION_INPUT = (By.XPATH, "//input[@placeholder='* –°—Ç–∞–Ω—Ü–∏—è –º–µ—Ç—Ä–æ']")
    PHONE_INPUT = (By.XPATH, "//input[@placeholder='* –¢–µ–ª–µ—Ñ–æ–Ω: –Ω–∞ –Ω–µ–≥–æ –ø–æ–∑–≤–æ–Ω–∏—Ç –∫—É—Ä—å–µ—Ä']")
    NEXT_BUTTON = (By.CLASS_NAME, "Button_Middle__1CSJM")

    # –õ–æ–∫–∞—Ç–æ—Ä—ã –¥–ª—è –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    ERROR_MESSAGES = (By.CLASS_NAME, "Input_ErrorMessage__3HvIb")

    # –õ–æ–∫–∞—Ç–æ—Ä—ã –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    RENTAL_HEADER = (By.XPATH, "//div[contains(text(), '–ü—Ä–æ –∞—Ä–µ–Ω–¥—É')]")
    DATE_INPUT = (By.XPATH, "//input[@placeholder='* –ö–æ–≥–¥–∞ –ø—Ä–∏–≤–µ–∑—Ç–∏ —Å–∞–º–æ–∫–∞—Ç']")
    RENTAL_PERIOD_DROPDOWN = (By.CLASS_NAME, "Dropdown-placeholder")
    RENTAL_PERIOD_OPTIONS = (By.CLASS_NAME, "Dropdown-option")
    COLOR_BLACK_CHECKBOX = (By.ID, "black")
    COLOR_GREY_CHECKBOX = (By.ID, "grey")
    COMMENT_INPUT = (By.XPATH, "//input[@placeholder='–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∫—É—Ä—å–µ—Ä–∞']")
    ORDER_BUTTON = (By.XPATH, "//button[contains(text(), '–ó–∞–∫–∞–∑–∞—Ç—å') and @class='Button_Button__ra12g Button_Middle__1CSJM']")
    CONFIRM_ORDER_BUTTON = (By.XPATH, "//button[contains(text(), '–î–∞')]")
    SUCCESS_MESSAGE = (By.CLASS_NAME, "Order_ModalHeader__3FDaJ")

    # –õ–æ–∫–∞—Ç–æ—Ä—ã –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –º–µ—Ç—Ä–æ
    METRO_DROPDOWN_OPTIONS = (By.CLASS_NAME, "select-search__row")
    METRO_OPTION_BUTTON = (By.XPATH, ".//button")

    # –õ–æ–∫–∞—Ç–æ—Ä—ã –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    CALENDAR = (By.CLASS_NAME, "react-datepicker")

    def __init__(self, driver):
        super().__init__(driver)
        self.url = urls.ORDER_PAGE_URL

    def open(self):
        self.driver.get(self.url)
        self.wait_for_element_visible((By.CLASS_NAME, "Order_Header__BZXOb"))

    def check_for_validation_errors(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        error_elements = self.driver.find_elements(*self.ERROR_MESSAGES)
        visible_errors = []
        
        for error in error_elements:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—à–∏–±–∫–∞ –≤–∏–¥–∏–º–∞ –∏ –∏–º–µ–µ—Ç —Ç–µ–∫—Å—Ç
            if error.is_displayed() and error.text.strip():
                visible_errors.append(error.text)
        
        if visible_errors:
            print(f"‚ùå Validation errors found: {visible_errors}")
            return True
        return False

    def fill_personal_info(self, first_name, last_name, address, metro_station, phone):
        print(f"üìù Filling personal info: {first_name} {last_name}")
        
        try:
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è –ø–æ –æ—á–µ—Ä–µ–¥–∏
            fields_to_fill = [
                (self.FIRST_NAME_INPUT, first_name, "First name"),
                (self.LAST_NAME_INPUT, last_name, "Last name"),
                (self.ADDRESS_INPUT, address, "Address"),
                (self.PHONE_INPUT, phone, "Phone")
            ]
            
            for locator, value, field_name in fields_to_fill:
                field = self.wait.until(EC.element_to_be_clickable(locator))
                field.clear()
                field.send_keys(value)
                print(f"  ‚úÖ {field_name}: {value}")
                
                # –ñ–¥–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–æ—Ä–º—ã
                WebDriverWait(self.driver, 2).until(
                    lambda driver: field.get_attribute('value') == value
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—è
                if self.check_for_validation_errors():
                    print(f"‚ùå Validation error after filling {field_name}")
                    return False
            
            # –í—ã–±–æ—Ä —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ
            print(f"üöá Selecting metro station: {metro_station}")
            metro_success = self.select_metro_station(metro_station)
            if not metro_success:
                print("‚ùå Failed to select metro station")
                return False
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫
            if self.check_for_validation_errors():
                print("‚ùå Validation errors after filling all fields")
                return False
                
            print("‚úÖ All personal info filled successfully")
            return True
            
        except Exception as e:
            print(f"‚ùå Error filling personal info: {e}")
            return False

    def select_metro_station(self, station_name):
        print(f"üöá Selecting metro station: {station_name}")
        
        try:
            # –ö–ª–∏–∫–∞–µ–º –Ω–∞ –ø–æ–ª–µ –≤—ã–±–æ—Ä–∞ –º–µ—Ç—Ä–æ
            metro_field = self.wait.until(EC.element_to_be_clickable(self.METRO_STATION_INPUT))
            metro_field.click()
            
            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
            WebDriverWait(self.driver, 5).until(
                EC.visibility_of_element_located(self.METRO_DROPDOWN_OPTIONS)
            )
            
            # –í–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏
            metro_field.send_keys(station_name)
            
            # –ñ–¥–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å—Ç–∞–Ω—Ü–∏–π
            WebDriverWait(self.driver, 5).until(
                lambda driver: len(driver.find_elements(*self.METRO_DROPDOWN_OPTIONS)) > 0
            )
            
            # –ò—â–µ–º —Å—Ç–∞–Ω—Ü–∏—é –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º —Å–ø–∏—Å–∫–µ
            station_options = self.driver.find_elements(*self.METRO_DROPDOWN_OPTIONS)
            station_found = False
            
            for option in station_options:
                if station_name in option.text:
                    # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–Ω—É—Ç—Ä–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ option
                    button = option.find_element(*self.METRO_OPTION_BUTTON)
                    button.click()
                    print(f"‚úÖ Metro station selected: {station_name}")
                    station_found = True
                    break
            
            if not station_found and station_options:
                # –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ—Ç, –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç–∞–Ω—Ü–∏—é
                first_option = station_options[0]
                button = first_option.find_element(*self.METRO_OPTION_BUTTON)
                button.click()
                print(f"‚úÖ Selected first available station: {first_option.text}")
                station_found = True
            
            if station_found:
                # –ñ–¥–µ–º —Å–∫—Ä—ã—Ç–∏—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
                WebDriverWait(self.driver, 5).until(
                    EC.invisibility_of_element_located(self.METRO_DROPDOWN_OPTIONS)
                )
                return True
            else:
                print("‚ùå No metro stations found in dropdown")
                return False
                
        except Exception as e:
            print(f"‚ùå Error selecting metro station: {e}")
            return False

    def _is_first_page_visible(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∏–¥–∏–º–∞ –ª–∏ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ñ–æ—Ä–º—ã –∑–∞–∫–∞–∑–∞"""
        try:
            return WebDriverWait(self.driver, 3).until(
                EC.visibility_of_element_located(self.FIRST_NAME_INPUT)
            ).is_displayed()
        except:
            return False

    def _is_second_page_visible(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∏–¥–∏–º–∞ –ª–∏ –≤—Ç–æ—Ä–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ñ–æ—Ä–º—ã –∑–∞–∫–∞–∑–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            second_page_elements = [
                self.RENTAL_HEADER,
                self.DATE_INPUT,
                self.RENTAL_PERIOD_DROPDOWN
            ]
            
            for element_locator in second_page_elements:
                try:
                    element = WebDriverWait(self.driver, 5).until(
                        EC.visibility_of_element_located(element_locator)
                    )
                    if element.is_displayed():
                        print(f"‚úÖ Second page element found: {element_locator}")
                        return True
                except:
                    continue
            
            print("‚ùå No second page elements found")
            return False
        except Exception as e:
            print(f"‚ùå Error checking second page: {e}")
            return False

    def click_next_button(self):
        print("‚û°Ô∏è Clicking next button")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –Ω–∞–∂–∞—Ç–∏–µ–º
            if self.check_for_validation_errors():
                print("‚ùå Cannot proceed - validation errors present")
                return False
            
            # –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É
            next_button = self.wait.until(EC.element_to_be_clickable(self.NEXT_BUTTON))
            
            # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —ç–ª–µ–º–µ–Ω—Ç—É
            self.driver.execute_script("arguments[0].scrollIntoView(true);", next_button)
            
            # –ñ–¥–µ–º –ø–æ–∫–∞ —ç–ª–µ–º–µ–Ω—Ç —Å—Ç–∞–Ω–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º
            WebDriverWait(self.driver, 5).until(
                EC.element_to_be_clickable(self.NEXT_BUTTON)
            )
            
            # –ö–ª–∏–∫–∞–µ–º –∫–Ω–æ–ø–∫—É
            next_button.click()
            
            # –ñ–¥–µ–º –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –≤—Ç–æ—Ä—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            try:
                WebDriverWait(self.driver, 10).until(
                    lambda driver: self._is_second_page_visible()
                )
                print("‚úÖ Successfully moved to second page")
                return True
            except:
                print("‚ùå Failed to move to second page")
                return False
                
        except Exception as e:
            print(f"‚ùå Error clicking next button: {e}")
            return False

    def close_calendar_if_visible(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–∞—Ç—ã, –µ—Å–ª–∏ –æ–Ω –æ—Ç–∫—Ä—ã—Ç –∏ –º–µ—à–∞–µ—Ç"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—Ä—ã—Ç –ª–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—å
            calendar = self.driver.find_elements(*self.CALENDAR)
            if calendar and calendar[0].is_displayed():
                print("üìÖ Calendar is open, closing it...")
                # –ù–∞–∂–∏–º–∞–µ–º Escape –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
                from selenium.webdriver.common.keys import Keys
                date_field = self.driver.find_element(*self.DATE_INPUT)
                date_field.send_keys(Keys.ESCAPE)
                print("‚úÖ Calendar closed with Escape key")
                return True
        except Exception as e:
            print(f"‚ö†Ô∏è Could not close calendar: {e}")
        return False

    def fill_rental_info(self, date, rental_period, color, comment):
        print(f"üìÖ Filling rental info: {date}, {rental_period}, {color}")
        
        try:
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞—Ç—É
            date_field = self.wait.until(EC.element_to_be_clickable(self.DATE_INPUT))
            date_field.clear()
            date_field.send_keys(date)
            
            # –ñ–¥–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞—Ç—ã
            WebDriverWait(self.driver, 5).until(
                lambda driver: date_field.get_attribute('value') == date
            )
            print(f"‚úÖ Date filled: {date}")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –µ—Å–ª–∏ –æ–Ω –æ—Ç–∫—Ä—ã–ª—Å—è
            self.close_calendar_if_visible()
            
            # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–∏–æ–¥ –∞—Ä–µ–Ω–¥—ã
            self.select_rental_period(rental_period)
            
            # –í—ã–±–∏—Ä–∞–µ–º —Ü–≤–µ—Ç
            if color == "black":
                color_checkbox = self.wait.until(EC.element_to_be_clickable(self.COLOR_BLACK_CHECKBOX))
                if not color_checkbox.is_selected():
                    color_checkbox.click()
                print("‚úÖ Color selected: black")
            elif color == "grey":
                color_checkbox = self.wait.until(EC.element_to_be_clickable(self.COLOR_GREY_CHECKBOX))
                if not color_checkbox.is_selected():
                    color_checkbox.click()
                print("‚úÖ Color selected: grey")
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            comment_field = self.wait.until(EC.element_to_be_clickable(self.COMMENT_INPUT))
            comment_field.clear()
            comment_field.send_keys(comment)
            
            # –ñ–¥–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            WebDriverWait(self.driver, 5).until(
                lambda driver: comment_field.get_attribute('value') == comment
            )
            print(f"‚úÖ Comment filled: {comment}")
            
            print("‚úÖ All rental info filled successfully")
            
        except Exception as e:
            print(f"‚ùå Error filling rental info: {e}")
            raise

    def select_rental_period(self, rental_period):
        print(f"‚è±Ô∏è Selecting rental period: {rental_period}")
        
        try:
            # –ù–∞—Ö–æ–¥–∏–º –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫
            dropdown = self.wait.until(EC.element_to_be_clickable(self.RENTAL_PERIOD_DROPDOWN))
            
            # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —ç–ª–µ–º–µ–Ω—Ç—É
            self.driver.execute_script("arguments[0].scrollIntoView(true);", dropdown)
            
            # –ñ–¥–µ–º –ø–æ–∫–∞ —ç–ª–µ–º–µ–Ω—Ç —Å—Ç–∞–Ω–µ—Ç –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º
            WebDriverWait(self.driver, 5).until(
                EC.element_to_be_clickable(self.RENTAL_PERIOD_DROPDOWN)
            )
            
            # –ö–ª–∏–∫–∞–µ–º –Ω–∞ –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫
            dropdown.click()
            
            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –æ–ø—Ü–∏–π
            options = WebDriverWait(self.driver, 5).until(
                EC.visibility_of_all_elements_located(self.RENTAL_PERIOD_OPTIONS)
            )
            print(f"Found {len(options)} rental period options")
            
            option_found = False
            for option in options:
                if rental_period in option.text:
                    print(f"üéØ Selecting: {option.text}")
                    # –ñ–¥–µ–º –ø–æ–∫–∞ –æ–ø—Ü–∏—è —Å—Ç–∞–Ω–µ—Ç –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–π
                    WebDriverWait(self.driver, 5).until(
                        EC.element_to_be_clickable((By.XPATH, f"//div[contains(@class, 'Dropdown-option') and contains(text(), '{rental_period}')]"))
                    )
                    option.click()
                    print(f"‚úÖ Rental period selected: {rental_period}")
                    option_found = True
                    break
            
            if not option_found and options:
                print(f"üîÑ No exact match, selecting first option: {options[0].text}")
                options[0].click()
                print("‚úÖ Selected first available option")
            elif not options:
                print("‚ùå No rental period options found")
                
        except Exception as e:
            print(f"‚ùå Error selecting rental period: {e}")

    def click_order_button(self):
        print("üõí Clicking order button")
        
        try:
            # –ò—â–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–∫–∞–∑–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ –ª–æ–∫–∞—Ç–æ—Ä–∞–º–∏
            order_button_locators = [
                (By.XPATH, "//button[contains(text(), '–ó–∞–∫–∞–∑–∞—Ç—å') and @class='Button_Button__ra12g Button_Middle__1CSJM']"),
                (By.XPATH, "//button[contains(text(), '–ó–∞–∫–∞–∑–∞—Ç—å')]"),
                (By.CLASS_NAME, "Button_Middle__1CSJM")
            ]
            
            order_button = None
            for locator in order_button_locators:
                try:
                    order_button = WebDriverWait(self.driver, 5).until(
                        EC.element_to_be_clickable(locator)
                    )
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∫–Ω–æ–ø–∫–∞ –∑–∞–∫–∞–∑–∞ –ø–æ —Ç–µ–∫—Å—Ç—É
                    if "–ó–∞–∫–∞–∑–∞—Ç—å" in order_button.text:
                        print(f"‚úÖ Found order button with locator: {locator}")
                        break
                    else:
                        order_button = None
                except:
                    continue
            
            if not order_button:
                raise Exception("Order button not found with any locator")
            
            # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —ç–ª–µ–º–µ–Ω—Ç—É
            self.driver.execute_script("arguments[0].scrollIntoView(true);", order_button)
            
            # –ñ–¥–µ–º –ø–æ–∫–∞ –∫–Ω–æ–ø–∫–∞ —Å—Ç–∞–Ω–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–π
            WebDriverWait(self.driver, 5).until(
                EC.element_to_be_clickable(order_button_locators[0])
            )
            
            # –ö–ª–∏–∫–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–∫–∞–∑–∞
            order_button.click()
            
            print("‚úÖ Order button clicked")
            
        except Exception as e:
            print(f"‚ùå Error clicking order button: {e}")
            raise

    def confirm_order(self):
        print("‚úÖ Confirming order")
        
        try:
            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            WebDriverWait(self.driver, 10).until(
                EC.visibility_of_element_located((By.XPATH, "//div[contains(@class, 'Order_Modal')]"))
            )
            print("‚úÖ Confirmation modal appeared")
            
            # –ò—â–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            confirm_button_locators = [
                (By.XPATH, "//button[contains(text(), '–î–∞')]"),
                (By.XPATH, "//div[contains(@class, 'Order_Modal')]//button[contains(text(), '–î–∞')]")
            ]
            
            confirm_button = None
            for locator in confirm_button_locators:
                try:
                    confirm_button = WebDriverWait(self.driver, 10).until(
                        EC.element_to_be_clickable(locator)
                    )
                    print(f"‚úÖ Found confirm button with locator: {locator}")
                    break
                except:
                    continue
            
            if not confirm_button:
                raise Exception("Confirm button not found")
            
            # –ñ–¥–µ–º –ø–æ–∫–∞ –∫–Ω–æ–ø–∫–∞ —Å—Ç–∞–Ω–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–π
            WebDriverWait(self.driver, 5).until(
                EC.element_to_be_clickable(confirm_button_locators[0])
            )
            
            # –ö–ª–∏–∫–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            confirm_button.click()
            
            print("‚úÖ Order confirmed")
            
            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ
            WebDriverWait(self.driver, 10).until(
                EC.visibility_of_element_located(self.SUCCESS_MESSAGE)
            )
            print("‚úÖ Success message appeared")
            
        except Exception as e:
            print(f"‚ùå Error confirming order: {e}")
            raise

    def is_success_message_displayed(self):
        try:
            is_displayed = self.is_element_visible(self.SUCCESS_MESSAGE)
            if is_displayed:
                message_element = self.driver.find_element(*self.SUCCESS_MESSAGE)
                message_text = message_element.text
                print(f"üìã Success message displayed: {message_text}")
            else:
                print("‚ùå Success message not displayed")
            return is_displayed
        except Exception as e:
            print(f"‚ùå Error checking success message: {e}")
            return False